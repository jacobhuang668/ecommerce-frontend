{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_SAVE_REQUEST, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL, PRODUCT_DELETE_SUCCESS, PRODUCT_DELETE_FAIL, PRODUCT_DELETE_REQUEST, PRODUCT_REVIEW_SAVE_REQUEST, PRODUCT_REVIEW_SAVE_FAIL, PRODUCT_REVIEW_SAVE_SUCCESS } from \"../constants/productConstants\";\nimport Axios from \"axios\";\n//如果没有Axios调用外部api的话，Redux 的 dispatch 会在一个事件循环中收集所有动作（action），然后一次性调用 Reducer 更新状态，而不是立即触发多次渲染。\n//只有引入异步操作（如 axios.get 或 setTimeout），状态更新会被分隔在不同事件循环\nconst listProducts = (category = \"\", searchKeyword = \"\", sortOrder = \"\") => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    //mock调用后台api\n    // await new Promise((resolve) => setTimeout(resolve, 1000));\n    // const { data } = { data: { products: [\"1\", \"2\"] } };\n    const {\n      data\n    } = await Axios.get(\"/api/products?category=\" + category + \"&searchKeyword=\" + searchKeyword + \"&sortOrder=\" + sortOrder);\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport { listProducts };","map":{"version":3,"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_SAVE_REQUEST","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAIL","PRODUCT_DELETE_REQUEST","PRODUCT_REVIEW_SAVE_REQUEST","PRODUCT_REVIEW_SAVE_FAIL","PRODUCT_REVIEW_SAVE_SUCCESS","Axios","listProducts","category","searchKeyword","sortOrder","dispatch","type","data","get","payload","error","message"],"sources":["/Users/huanghuangjian/Documents/frontend-learning/react/ecommerce-frontend/src/actions/productActions.js"],"sourcesContent":["import {\n  PRODUCT_LIST_REQUEST,\n  PRODUCT_LIST_SUCCESS,\n  PRODUCT_LIST_FAIL,\n  PRODUCT_DETAILS_REQUEST,\n  PRODUCT_DETAILS_SUCCESS,\n  PRODUCT_DETAILS_FAIL,\n  PRODUCT_SAVE_REQUEST,\n  PRODUCT_SAVE_SUCCESS,\n  PRODUCT_SAVE_FAIL,\n  PRODUCT_DELETE_SUCCESS,\n  PRODUCT_DELETE_FAIL,\n  PRODUCT_DELETE_REQUEST,\n  PRODUCT_REVIEW_SAVE_REQUEST,\n  PRODUCT_REVIEW_SAVE_FAIL,\n  PRODUCT_REVIEW_SAVE_SUCCESS,\n} from \"../constants/productConstants\";\nimport Axios from \"axios\";\n//如果没有Axios调用外部api的话，Redux 的 dispatch 会在一个事件循环中收集所有动作（action），然后一次性调用 Reducer 更新状态，而不是立即触发多次渲染。\n//只有引入异步操作（如 axios.get 或 setTimeout），状态更新会被分隔在不同事件循环\nconst listProducts =\n  (category = \"\", searchKeyword = \"\", sortOrder = \"\") =>\n  async (dispatch) => {\n    try {\n      dispatch({ type: PRODUCT_LIST_REQUEST });\n      //mock调用后台api\n      // await new Promise((resolve) => setTimeout(resolve, 1000));\n      // const { data } = { data: { products: [\"1\", \"2\"] } };\n      const { data } = await Axios.get(\n        \"/api/products?category=\" +\n          category +\n          \"&searchKeyword=\" +\n          searchKeyword +\n          \"&sortOrder=\" +\n          sortOrder\n      );\n      dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\n    }\n  };\nexport { listProducts };\n"],"mappings":"AAAA,SACEA,oBAAoB,EACpBC,oBAAoB,EACpBC,iBAAiB,EACjBC,uBAAuB,EACvBC,uBAAuB,EACvBC,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAoB,EACpBC,iBAAiB,EACjBC,sBAAsB,EACtBC,mBAAmB,EACnBC,sBAAsB,EACtBC,2BAA2B,EAC3BC,wBAAwB,EACxBC,2BAA2B,QACtB,+BAA+B;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA;AACA,MAAMC,YAAY,GAChBA,CAACC,QAAQ,GAAG,EAAE,EAAEC,aAAa,GAAG,EAAE,EAAEC,SAAS,GAAG,EAAE,KAClD,MAAOC,QAAQ,IAAK;EAClB,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAErB;IAAqB,CAAC,CAAC;IACxC;IACA;IACA;IACA,MAAM;MAAEsB;IAAK,CAAC,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAC9B,yBAAyB,GACvBN,QAAQ,GACR,iBAAiB,GACjBC,aAAa,GACb,aAAa,GACbC,SACJ,CAAC;IACDC,QAAQ,CAAC;MAAEC,IAAI,EAAEpB,oBAAoB;MAAEuB,OAAO,EAAEF;IAAK,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdL,QAAQ,CAAC;MAAEC,IAAI,EAAEnB,iBAAiB;MAAEsB,OAAO,EAAEC,KAAK,CAACC;IAAQ,CAAC,CAAC;EAC/D;AACF,CAAC;AACH,SAASV,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}